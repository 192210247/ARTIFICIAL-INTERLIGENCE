from collections import deque

class Graph:
    def __init__(self):
        self.graph = {}

    def add_edge(self, u, v):
        """Add an edge between nodes u and v."""
        if u not in self.graph:
            self.graph[u] = []
        if v not in self.graph:
            self.graph[v] = []
        self.graph[u].append(v)
        self.graph[v].append(u)

    def bfs(self, start):
        """Perform BFS starting from the given node."""
        visited = set()      # Set to track visited nodes
        queue = deque([start])  # Queue to hold the nodes to visit
        result = []          # List to store the BFS traversal order

        while queue:
            node = queue.popleft()  # Get the first node from the queue
            if node not in visited:
                visited.add(node)    # Mark the node as visited
                result.append(node)   # Add the node to the result list

                # Add all unvisited neighbors of the current node to the queue
                for neighbor in self.graph[node]:
                    if neighbor not in visited:
                        queue.append(neighbor)

        return result

# Main Program
if __name__ == "__main__":
    # Create a graph
    g = Graph()
    
    # Add edges to the graph
    g.add_edge(1, 2)
    g.add_edge(1, 3)
    g.add_edge(2, 4)
    g.add_edge(2, 5)
    g.add_edge(3, 6)
    g.add_edge(3, 7)

    # Perform BFS starting from node 1
    print("BFS Traversal starting from node 1:")
    result = g.bfs(1)
    print(result)
