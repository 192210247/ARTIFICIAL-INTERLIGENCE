class Graph:
    def __init__(self):
        self.graph = {}

    def add_edge(self, u, v):
        """Add an edge between nodes u and v."""
        if u not in self.graph:
            self.graph[u] = []
        if v not in self.graph:
            self.graph[v] = []
        self.graph[u].append(v)
        self.graph[v].append(u)

    def dfs_recursive(self, start, visited=None):
        """Perform DFS using recursion."""
        if visited is None:
            visited = set()  # Set to track visited nodes
        visited.add(start)  # Mark the node as visited
        print(start, end=" ")

        # Recur for all the vertices adjacent to this node
        for neighbor in self.graph[start]:
            if neighbor not in visited:
                self.dfs_recursive(neighbor, visited)

    def dfs_iterative(self, start):
        """Perform DFS using an iterative approach with a stack."""
        visited = set()        # Set to track visited nodes
        stack = [start]        # Stack to manage nodes to be visited

        while stack:
            node = stack.pop()  # Pop a node from the stack
            if node not in visited:
                visited.add(node)  # Mark the node as visited
                print(node, end=" ")

                # Add all unvisited neighbors to the stack
                for neighbor in reversed(self.graph[node]):
                    if neighbor not in visited:
                        stack.append(neighbor)


# Main Program
if __name__ == "__main__":
    # Create a graph
    g = Graph()
    
    # Add edges to the graph
    g.add_edge(1, 2)
    g.add_edge(1, 3)
    g.add_edge(2, 4)
    g.add_edge(2, 5)
    g.add_edge(3, 6)
    g.add_edge(3, 7)

    print("DFS Recursive Traversal starting from node 1:")
    g.dfs_recursive(1)
    print("\n")

    print("DFS Iterative Traversal starting from node 1:")
    g.dfs_iterative(1)
